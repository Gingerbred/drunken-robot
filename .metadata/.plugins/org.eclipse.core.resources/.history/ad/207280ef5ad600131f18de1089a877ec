import java.io.*;
import java.util.*;
public class Game {

    //
    // Public
    //

    // Globals
    private static final boolean DEBUGGING  = false;   // Debugging flag.
    private static final int MAX_LOCALES = 11;      // Total number of rooms/locations we have in the game.
    private static Locale currentLocale = null;     // Player starts in locale 0.
    private static String command;          // What the player types as he or she plays the game.
    private static boolean stillPlaying = true;    // Controls the game loop.
    private static double moves = 0;    // Counter of the player's moves.
    private static double score = 0;      // Tracker of the player's score.
    private static double achievementratio=0; // Ratio made up of score/moves.
    private static String map;	   // The ASCII map!
    private static int completeKey=0;    // The integer to make the key to the cottage!
    private static Item[] inventory;   // Keeping an inventory!
    private static Currency valencia=new Currency("Valencia"); // This makes our currency for the game
    private static Random gen= new Random(); // Random generator used for Valencia addition.
    private static Scanner inputReader = new Scanner(System.in);//Scan used for command input 
    private static Scanner transaction = new Scanner(System.in); //Scan used for shop input
    private static  Listz lm1 = new Listz();
    private static int num= 5;
    private static ArrayList<String> bag= new ArrayList<String>();
	private static boolean visited=false;
	private static ListItem retVal=new ListItem(); // the purchased item from the magick shoppe
	private static ListItem[] storeInventory=new ListItem[666];
    public static void main(String[] args) {
        if (DEBUGGING) {
            // Display the command line args.
            System.out.println("Starting with args:");
            for (int i = 0; i < args.length; i++) {
                System.out.println(i + ":" + args[i]);
            }
        }
        // Get the game started.
        init();
        updateDisplay();

        // Game Loop
        while (stillPlaying) {
            getCommand();
            navigate();
            updateDisplay();
        }

        // We're done. Thank the player and exit.
        System.out.println("Thank you for playing.");
    }
    // Private
    private static void init() {
        // Initialize any uninitialized globals.
        command = new String();
        stillPlaying = true;   
        
        // Set up the location instances of the Locale class.
        Locale loc0 = new Locale(0);
        loc0.setName("The Pub");
        loc0.setDesc("A really derty pub. You don't remember how you got here. \n A map is on the floor.");
        loc0.setNavi("south");

        Locale loc1 = new Locale(1);
        loc1.setName("The Town");
        loc1.setDesc("A nice quaint town with a wild nightlife!");
    	loc1.setNavi("north south east");
    	
        Locale loc2 = new Locale(2);
        loc2.setName("Manly Magicks Shoppe");
        loc2.setDesc("Welcome to my store! \nType in 'magic' to see my inventory of items.");
        loc2.setNavi("west");
        
        Locale loc3 = new Locale(3);
        loc3.setName("Entryway");
        loc3.setDesc("The way out of town. We'll need to find the Master to go further south!");
        loc3.setNavi("north south east west");
        
        Water loc4 = new Water(4);
        loc4.setName("Waterfall");
        loc4.setDesc("The water is moving at a calm pace. \n Your master is flailing about.");
        loc4.setWaterSpeed(20);
        loc4.setNavi("east");
        
        Deserted loc5 = new Deserted(5);
        loc5.setName("Cliff");
        loc5.setDesc("What a beautiful view!");
        loc5.setheatIndex(50);
        loc5.setNavi("east");
        
        Locale loc6 = new Locale(6);
        loc6.setName("Entity Meadow");
        loc6.setDesc("There's a nice meadow ahead.");
        loc6.setNavi("north south east west");
        
        Water loc7 = new Water(7);
        loc7.setName("Sensual Stream");
        loc7.setDesc("A nice refreshing stream. There's a key piece on the bank.");
        loc7.setWaterSpeed(5);
        loc7.setNavi("east");
        
        Locale loc8 = new Locale(8);
        loc8.setName("Friendly Forest");
        loc8.setDesc("The forest where your master's cottage lies.\nFind the three key pieces to get home sweet home!");
        loc8.setNavi("north south");
        
        Deserted loc9 = new Deserted(9);
        loc9.setName("Devoid Desert");
        loc9.setDesc("This is a very dry place. There's another piece of the key lying in the sand.");
        loc9.setheatIndex(70);
        loc9.setNavi("west");
        
        Locale loc10 = new Locale(10);
        loc10.setName("Cottage");
        loc10.setDesc("Home Sweet Home! Welcome back to the Cottage after your crazy night!");
        loc10.setNavi("north");
     // Set up the location array. 
        if (DEBUGGING) {
            System.out.println("All game locations:");
                System.out.println(currentLocale.getText());
            
        }
        // Linking up the Locales
       loc0.setNorth(null);
       loc0.setSouth(loc1);
       loc0.setEast(null);
       loc0.setWest(null);
       loc1.setNorth(loc0);
       loc1.setSouth(loc3);
       loc1.setEast(loc2);
       loc1.setWest(null);
       loc2.setNorth(null);
       loc2.setSouth(null);
       loc2.setEast(null);
       loc2.setWest(loc1);
       loc3.setNorth(loc1);
       loc3.setSouth(loc6);
       loc3.setEast(loc5);
       loc3.setWest(loc4);
       loc4.setNorth(null);
       loc4.setSouth(null);
       loc4.setEast(loc3);
       loc4.setWest(null);
       loc5.setNorth(null);
       loc5.setSouth(null);
       loc5.setEast(null);
       loc5.setWest(loc3);
       loc6.setNorth(loc3);
       loc6.setSouth(loc9);
       loc6.setEast(loc8);
       loc6.setWest(loc7);
       loc7.setNorth(null);
       loc7.setSouth(null);
       loc7.setEast(loc6);
       loc7.setWest(null);
       loc8.setNorth(null);
       loc8.setSouth(null);
       loc8.setEast(null);
       loc8.setWest(loc6);
       loc9.setNorth(loc6);
       loc9.setSouth(loc10);
       loc9.setEast(null);
       loc9.setWest(null);
       loc10.setNorth(loc9);
       loc10.setSouth(null);
       loc10.setEast(null);
       loc10.setWest(null);
    
     Item item0=new Item(0);
     item0.setName("map");
     item0.setDescription("This is your map of the world! Type in map or m to look at it. ");
     
     Item item1=new Item(1);
     item1.setName("master");
     item1.setDescription("This is your master! His name is Matteo. ");
     
     Item item2=new Item(2);
     item2.setName("KeyPart");
     item2.setDescription("This is the first key to the cottage. ");
     
     Item item3=new Item(3);
     item3.setName("KeyPart2");
     item3.setDescription("This is the second key to the cottage ");
     
     Item item4=new Item(4);
     item4.setName("KeyPart3");
     item4.setDescription("This is the third key to the cottage. ");
     
    inventory= new Item[5];
    inventory[0]=item0;
    inventory[1]=item1;
    inventory[2]=item2;
    inventory[3]=item3;
    inventory[4]=item4;
     
        currentLocale=loc0;
        System.out.println("Presenting The Drunken Robot!!!");
       System.out.print("You wake up after a huge night of partying and possibly creating cyborgs.\nGet back to your cottage while finding out wherever the heck your master is! \n");
    }
    private static void updateDisplay() {
        System.out.println(currentLocale.getText());
    }
    private static void getCommand() {
            achievementratio=score/moves+valencia.getSuperAmt()/4;	  
            long l = (int)Math.round(achievementratio * 100); // truncates  
            achievementratio = l / 100.0; 
    	System.out.print("[" + moves + " moves, score " + score + "Valencia"+ valencia.getAmt()+" achievement ratio: "+ achievementratio + "] ");
        command = inputReader.nextLine();  // command is global.
    }
    private static void navigate() { 
       
        Locale newLocation=new Locale();
        newLocation=currentLocale;
        
        
        if ( command.equalsIgnoreCase("north") || command.equalsIgnoreCase("n") ) {
        	if(currentLocale.getNorth()!=null){
                currentLocale = currentLocale.getNorth();
                moves+=1;
                valencia.add(gen.nextInt(16));
            }else{
                System.out.println("You can't go that way");
            }
        } else if ( command.equalsIgnoreCase("south") || command.equalsIgnoreCase("s") ) {
        	if(currentLocale.getSouth()!=null){
                currentLocale = currentLocale.getSouth();
            if (currentLocale.getId()==10 && completeKey !=3){ // You need the keys to pass through here.
            	System.out.println("Get all three keys first");
            	System.out.println("You can't go that way");
            	currentLocale=newLocation;
               }
            if (currentLocale.getId()== 6 && inventory[1].isFound()==false){
               System.out.println("Where's your master?");
               System.out.println("You can't go that way");
               currentLocale=newLocation;
               }
                moves+=1;
                valencia.add(gen.nextInt(16));
            }else{
                System.out.println("You can't go that way");
            }
        } else if ( command.equalsIgnoreCase("east")  || command.equalsIgnoreCase("e") ) {
        	if(currentLocale.getEast()!=null){
                currentLocale = currentLocale.getEast();
                moves+=1;
                valencia.add(gen.nextInt(16));
            }else{
                System.out.println("You can't go that way");
            }
        } else if ( command.equalsIgnoreCase("west")  || command.equalsIgnoreCase("w") ) {
        	if(currentLocale.getWest()!=null){
                currentLocale = currentLocale.getWest();
                moves+=1;
                valencia.add(gen.nextInt(16));
            }else{
                System.out.println("You can't go that way");
            }
        } else if ( command.equalsIgnoreCase("quit")  || command.equalsIgnoreCase("q")) {
            quit();
        } else if ( command.equalsIgnoreCase("take")  || command.equalsIgnoreCase("t")) {
        	takeItem();
        } else if ( command.equalsIgnoreCase("magic") ){
        	if(currentLocale.getId()==2&& visited==false){
        	magInit(lm1,storeInventory);
        	}
        	else if(currentLocale.getId()==2){ 
        	transaction();
        	}
        	else{
        	System.out.println("You need to go to the magick shoppe to do this.");
        	}
        } else if ( command.equalsIgnoreCase("inventory")|| command.equalsIgnoreCase("i")){
        	inventory();
        } else if ( command.equalsIgnoreCase("map") || command.equalsIgnoreCase("m")){
        	mapDisplay();
        } else if ( command.equalsIgnoreCase("dance") || command.equalsIgnoreCase("d")){
        	System.out.println("You do the robot. What redundancy.");
        } else if ( command.equalsIgnoreCase("help")  || command.equalsIgnoreCase("h")) {
            help();
        } else if ( command.equalsIgnoreCase("crap")){
        	System.out.println("Robots can't do that!");
        } else if ( command.equalsIgnoreCase("pee") || command.equalsIgnoreCase("p")){
        	System.out.println("You take some time to change your oil.");
        }
        else{
        	System.out.println("That was not a valid command. Please try again. ");
        	help();
        }
              if(currentLocale.getHasVisited()==true){
              	System.out.println("Your memory starts to trigger. \n It seems that you have previously visited here.");
              	
              }
              else{
              	currentLocale.setHasVisited(true);
              	score=score+5;
              	
              }
          }
    private static void mapDisplay(){
    	if(inventory[0].isFound()){
    	map= "                   The Pub         \n"+ 
    		 "                      |            \n"+
    		 "                   The Town--- Manly Magick Shoppe      \n"+
    		 "                      |            \n"+
    		 "      Waterfall--- Entryway--- The Cliff\n"+
    		 "                      |            \n"+
    		 " Sensual Stream--- Entity Meadow--- Devoid Desert\n"+
    		 "                      |            \n"+
    		 "                   Friendly Forest \n"+
    		 "                      |            \n"+
    		 "                   Cottage          ";
    	System.out.println(map);
    	}
    	else{
    		System.out.println("What Map?");
    	}
    }
    private static void help() {
        System.out.println("The commands are as follows:");
        System.out.println("   n/north");
        System.out.println("   s/south");
        System.out.println("   magic");
        System.out.println("   m/map");
        System.out.println("   h/help");
        System.out.println("   t/take");
        System.out.println("   d/dance");
        System.out.println("   i/inventory");
        System.out.println("   q/quit");
        System.out.println("   and a couple of hidden suprises!");
    }
    private static void inventory(){
   		   System.out.println("Your bag contains" + bag.toString()); 		
    }
    private static void takeItem(){
    	switch(currentLocale.getId()){
    	case 0:
    		if(inventory[0].isFound()==false){
    		bag.add(inventory[0].getName());
    		inventory[0].setFound(true);
    		currentLocale.setDesc("A derty pub. You don't recall any of last night's events.");}
    		else{
    			System.out.println("You already took that item");
    		}
    	break;
    	case 4:
    		if(inventory[1].isFound()==false){
        		bag.add(inventory[1].getName());
        		inventory[1].setFound(true);
    		currentLocale.setDesc("A large waterfall. It seems quite dangerous.");}
    		else{
    			System.out.println("You already took that item");
    		}
    	break;
    	case 7:
    		if(inventory[2].isFound()==false){
    			bag.add(inventory[2].getName());
    			inventory[2].setFound(true);
    		completeKey++;
    		System.out.println(completeKey);
    		currentLocale.setDesc("A calm stream. It's very refreshing. ");}
    		else{
    			System.out.println("You already took that item");
    		}
    	break;
    	case 8:
    		if(inventory[3].isFound()==false){
    			bag.add(inventory[3].getName());
    		inventory[3].setFound(true);
    		completeKey++;
    		System.out.println(completeKey);
    		currentLocale.setDesc("A friendly forest. You're almost home! ");}
    		else{
    			System.out.println("You already took that item");
    		}
    	break;
    	case 9:
    		if(inventory[4].isFound()==false){
    			bag.add(inventory[4].getName());
    		inventory[4].setFound(true);
    		completeKey++;
    		System.out.println(completeKey);
    		currentLocale.setDesc("A really hot desert.");}
    		else{
    			System.out.println("You already took that item");
    		}
    	break;
    	default:
    		System.out.println("There's no item here. Check somewhere else.");
    	break;
    	}
    	}	
    private static void quit() {
        stillPlaying = false;
    }
    public static void transaction(){
	    	System.out.println("Hello again! How've ya been? Oh, I keep forgetting you're a robot. \n Pick an item from the stock");
	    	String selection=transaction.nextLine();
	    	System.out.println(binarySearchArray(storeInventory, selection).getCost()+"Do you want to buy this?");
	    	String choice=transaction.nextLine();
	    	if(choice.equalsIgnoreCase("true")){
	    		valencia.subtract(retVal.getCost());
	    		Item weapon=new Item(num, retVal.getName(), retVal.getDesc(), true);
	    		bag.add(weapon.getName());
	    		System.out.println("Thanks for the business! The "+retVal.getName()+" has been added to your inventory.");
	    	}
    }
	private static void readMagicItemsFromFileToList(String fileName,
            Listz lm) {
    	File myFile = new File(fileName);
    	try {
    		Scanner input = new Scanner(myFile);
    		while (input.hasNext()) {
    			// Read a line from the file.
    			String itemName = input.nextLine();

    			// Construct a new list item and set its attributes.
    			ListItem fileItem = new ListItem();
    			fileItem.setName(itemName);
    			fileItem.setCost((int) (Math.random() * 100));
    			fileItem.setNext(null); // Still redundant. Still safe.

    			// Add the newly constructed item to the list.
    			lm.add(fileItem);
    		}
    		// Close the file.
    		input.close();
    	} catch (FileNotFoundException ex) {
    		System.out.println("File not found. " + ex.toString());
    	}

    }
	private static void readMagicItemsFromFileToArray(String fileName,
	             ListItem[] items) {
		File myFile = new File(fileName);
		try {
				int itemCount = 0;
				Scanner input = new Scanner(myFile);
	
				while (input.hasNext() && itemCount < items.length) {
					// Read a line from the file.
					String itemName = input.nextLine();
	
					// Construct a new list item and set its attributes.
					ListItem fileItem = new ListItem();
					fileItem.setName(itemName);
					fileItem.setCost((int) (Math.random() * 100));
					fileItem.setNext(null); // Still redundant. Still safe.
	
					// Add the newly constructed item to the array.
					items[itemCount] = fileItem;
					itemCount = itemCount + 1;
				}	
				// Close the file.
				input.close();
		} catch (FileNotFoundException ex) {
			System.out.println("File not found. " + ex.toString());
		}
		}
	private static void selectionSort(ListItem[] items) {
		for (int pass = 0; pass < items.length-1; pass++) {	
			// System.out.println(pass + "-" + items[pass]);
			int indexOfTarget = pass;
			int indexOfSmallest = indexOfTarget;
			for (int j = indexOfTarget+1; j < items.length; j++) {
				if (items[j].getName().compareToIgnoreCase(items[indexOfSmallest].getName()) < 0) {
					indexOfSmallest = j;
				}
			}
			ListItem temp = items[indexOfTarget];
			items[indexOfTarget] = items[indexOfSmallest];
			items[indexOfSmallest] = temp;
		}
	}
    private static void magInit(Listz lm, ListItem[] store){
	    	System.out.println("Why hello there! Is this your first time here? Excuse me while I set things up...");
	    	readMagicItemsFromFileToList("MagItems.txt", lm);
	    	readMagicItemsFromFileToArray("MagItems.txt", store);
	    	selectionSort(store);
	    	System.out.println("Ok, I'm all done setting up. Just talk to me again to buy something.");
	    	visited=true;
    	}
    private static ListItem binarySearchArray(ListItem[] items,
            String target) {
    	System.out.println("Binary Searching for " + target + ".");
    	ListItem currentItem = new ListItem();
    	boolean isFound = false;
    	int counter = 0;
    	int low  = 0;
    	int high = items.length-1; // because 0-based arrays
    	while ( (!isFound) && (low <= high)) {
    		int mid = Math.round((high + low) / 2);
    		currentItem = items[mid];
    		if (currentItem.getName().equalsIgnoreCase(target)) {
    			// We found it!
    			isFound = true;
    			retVal = currentItem;
    		} else {
    			// Keep looking.
    			counter++;
    			if (currentItem.getName().compareToIgnoreCase(target) > 0) {
					// target is higher in the list than the currentItem (at mid)
    				high = mid - 1;
    			} else {
    				// target is lower in the list than the currentItem (at mid)
    				low = mid + 1;
    			}
    		}
    	}
    	if (isFound) {
    		System.out.println("I found the "+target+" you were looking for!");
    	} else {
    		System.out.println("Could not find the " + target);
    	}

    	return retVal;
    }
}